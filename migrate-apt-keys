#!/bin/sh

# DESCRIPTION
#   This script migrates from "apt-key" managed keys to "[signed-by=.../keyrings/...]":
#    - loop through all lists in /etc/apt/sources.list.d
#      - read all lines with "deb..." that do not contain "[signed-by=]"
#      - download the GPG signature from the URL
#        - read the key ID from the signature
#        - download and save the key using gpg
#      - add "[signed-by=/usr/share/keyrings/...]" to the "deb..." line
#    - make a backup of the old .list file as .list.apt-key.bak
#
# USAGE
#   See --help.
#
# REQUIREMENTS
#   perl, curl, gpg
#
# CAVEATS
#   This does not work e.g. for Anydesk as the Ubuntu keyserver returns an expired key.
#   But you can manually download the ASCII armored key and then run migrate-apt-keys.sh:
#     curl https://keys.anydesk.com/repos/DEB-GPG-KEY | gpg --dearmor >/usr/share/keyrings/anydesk-stable-archive-keyring.gpg
#   See: https://lists.ubuntu.com/archives/ubuntu-users/2022-January/306500.html
#
# AUTHORS
#   Jens Berthold (https://github.com/maxhq); original GitHub gist: https://gist.github.com/maxhq/7dadf55064aaadc4d9e5993f89fad7b0
#   Alin Mr (https://github.com/mralusw)

set -ue

newline='
'
url_key_map=$newline


keyrings=/usr/local/share/keyrings

eecho() {
  printf '%s\n' "$*"
}

usage() {
  cat <<EOF
Args: [ KEYRING_FOLDER [SOURCE.list]... ]
Defaults:
  KEYRING_FOLDER=$keyrings
  SOURCE=( /etc/apt/sources.list /etc/apt/sources.list.d/*.list )

Before migrating, back up KEYRING_FOLDER, as well as SOURCEs. Files therein
will be modified. After migrating, check if 'apt update' works, then delete
(or better rename) '/etc/apt/trusted.gpg.d' and '/etc/apt/trusted.gpg'.
EOF
}

glob_match() {  # args: STR GLOB
  case "$1" in ($2) return 0 ;; (*) return 1 ;; esac
}

case "${1:-}" in (-h|--help) usage; exit 0 ;; esac

workdir=$(cd "${TMPDIR:-/tmp}"; printf '%s/' "$PWD"; mktemp -d migrate.XXXXXX)
cleanup() {
  set +e
  trap - EXIT PIPE INT TERM QUIT
  rm -rf "$workdir"
}
trap 'cleanup' EXIT
trap 'cleanup; exit 1' PIPE INT TERM QUIT

[ -z "${1:-}" ] || keyrings=$1
mkdir -p "$keyrings"
[ "$#" = 0 ] || shift
[ "$#" != 0 ] || set -- /etc/apt/sources.list /etc/apt/sources.list.d/*.list

process_repo() {  # args: REPO
  repo=$1; shift
  if ! [ -r "$repo" ]; then eecho "Could not read .list file \"$repo\""; return 0; fi
  : >"$new_repo"
  local sig_base; sig_base=${repo##*/}; sig_base=${sig_base%.list}; sig_base=${sig_base%.list.*}
  local sig_file; sig_file=$keyrings/$sig_base-apt-keyring.gpg
  local sig_keys; sig_keys=' '
  local now_secs; now_secs=$(date '+%s')
  local line

  while read -r line; do
    process_line
    eecho "$line" >>"$new_repo"
  done <"$repo"
  rm -f "${sig_file}~"

  if ! cmp "$repo" "$new_repo" >/dev/null 2>&1; then
    cp "$repo" "$repo.apt-key.bak"
    cat "$new_repo" >"$repo"  # preserve permissions
    eecho "$sig_base: migrated$newline"
  else
    eecho "$sig_base: unchanged$newline"
  fi
}

process_line() {  # modifies: $line; uses locals of process_repo()
  case "$line" in
    (deb-src*|deb*) ;;
    (*) return 0 ;;  # unmodified if not repo definition
  esac
  if eecho "$line" | grep -i '\[.*signed-by.*\]' >/dev/null; then return 0; fi  # skip if already "signed-by"

  eecho "$sig_base: += $line"

  if ! url=$(eecho "$line" | perl -pe 's{^ (?:(?:deb|deb-src) \s+) (?: \[[^\]]+] \s+)? (\S+?)/? \s+ (\S+) \s+ .* }{ $suite=$2; "$1/".($suite=~m|/$|?$suite:"dists/$2/") }xe'); then
    eecho "$sig_base: cannot parse line"
    return 0
  fi
  url2keyid "$url"
  [ -n "$keyid" ] || return 0

  if ! glob_match "$sig_keys" "* $keyid *"; then  # download key
    GPG_OPTS=''
    find_proxy
    if [ -n "$found_proxy" ]; then
      GPG_OPTS="--keyserver-options http-proxy=$found_proxy"
    fi
    if ! gpg $GPG_OPTS --quiet --no-default-keyring --keyring gnupg-ring:"$sig_file" --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$keyid"; then
      eecho "$sig_base: couldn't download $keyid from server"; return 0
    fi
    expiry=$(gpg --no-default-keyring --keyring="$sig_file" --list-keys --with-colons --fixed-list-mode | keyid=$keyid perl -wne 'if (/^(pub|sub):.*:$ENV{keyid}:/) { my @f = split /:/; print "$f[6]\n" }')
    if [ -n "$expiry" ] && [ "$expiry" -lt "$now_secs" ]; then
      eecho "$sig_base: key $keyid expired on $(date -d "1970-01-01 UTC $expiry seconds" +"%Y-%m-%d %T %z")"
    fi
    sig_keys=" $keyid$sig_keys"
    chmod 0644 "$sig_file"
  fi

  local m_line; ! m_line=$(
    eecho "$line" |
      sig_file=$sig_file perl -pe 's{
^ ((?:deb|deb-src) \s+) (?: \[ ([^\]]+) ] \s+ )? (.*)
}{$1\[$2 signed-by=$ENV{sig_file}\] $3}x') ||
    line=$m_line
}

# Check if http_proxy ir https_proxy or HTTP_PROXY or HTTPS_PROXY are set
find_proxy() { # args: None; out: found_proxy
  found_proxy=
  if [ -n "$http_proxy" ]; then
    found_proxy="$http_proxy"
  elif [ -n "$https_proxy" ]; then
    found_proxy="$https_proxy"
  elif [ -n "$HTTP_PROXY" ]; then
    found_proxy="$HTTP_PROXY"
  elif [ -n "$HTTPS_PROXY" ]; then
    found_proxy="$HTTPS_PROXY"
  fi
}

url2keyid() {  # args: URL; out: keyid
  keyid=
  local url; url=$1; shift
  local sig
  if glob_match "$url_key_map" "*$newline$url *"; then
    keyid=$url_key_map; keyid=${keyid##*$newline$url }; keyid=${keyid%%$newline*}
  else
    eecho "$sig_base: downloading $url"
    # download signature
    if ! sig=$(curl -s -f -L "${url}InRelease"); then
      if ! sig=$(curl -s -f -L "${url}Release.gpg"); then
        eecho "$sig_base: URL ${url}[InRelease|Release.gpg] not found"; return 0
      fi
    fi

    # read key ID from signature
    keyid=$(eecho "$sig" | gpg --verify -vv 2>&1 | tr '\n' ' ' | perl -pe 's{.*signature.*keyid ([0-9A-Z]+).*}{$1}i')
    if [ -z "$keyid" ]; then eecho "$sig_base: Could not find key id in signature"; return 0; fi
    eecho "$sig_base: key id = $keyid"
    url_key_map="$newline$url $keyid$url_key_map"
  fi
}

new_repo=$workdir/new_repo.list
for repo; do
  process_repo "$repo"
done

rm -rf "$workdir"
